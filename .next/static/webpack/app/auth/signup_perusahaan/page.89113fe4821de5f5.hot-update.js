"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/signup_perusahaan/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_BASE: function() { return /* binding */ API_BASE; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   apiForm: function() { return /* binding */ apiForm; },\n/* harmony export */   fetchEnergyNews: function() { return /* binding */ fetchEnergyNews; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// frontend/src/lib/api.ts\n/* ====================== Base URL ====================== */ const RAW_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:4000\" || 0;\n// hapus trailing slash supaya join URL konsisten\nconst API_BASE = RAW_BASE.replace(/\\/+$/, \"\");\n/* ====================== URL helpers ====================== */ function buildUrl(path) {\n    if (!path) return API_BASE;\n    if (/^https?:\\/\\//i.test(path)) return path; // sudah absolut\n    return \"\".concat(API_BASE).concat(path.startsWith(\"/\") ? \"\" : \"/\").concat(path);\n}\n/* ====================== Error helpers ====================== */ async function readErrorMessage(res) {\n    try {\n        const ct = res.headers.get(\"content-type\") || \"\";\n        if (ct.includes(\"application/json\")) {\n            const data = await res.json().catch(()=>({}));\n            return (data === null || data === void 0 ? void 0 : data.message) || (data === null || data === void 0 ? void 0 : data.error) || \"HTTP \".concat(res.status);\n        }\n        const text = await res.text();\n        return text || \"HTTP \".concat(res.status);\n    } catch (e) {\n        return \"HTTP \".concat(res.status);\n    }\n}\n/* ====================== Main fetch wrapper ====================== */ /**\r\n * Contoh:\r\n *   await api('/admin/signin', { json: { username, password } })\r\n *   const me = await api('/admin/me')\r\n */ async function api(path) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const { json, headers, expectJson = true, ...rest } = opts;\n    const h = new Headers(headers || {});\n    const sendingFormData = rest.body instanceof FormData;\n    const willSendJson = json !== undefined && !sendingFormData;\n    if (willSendJson) h.set(\"Content-Type\", \"application/json\");\n    var _rest_method;\n    const init = {\n        credentials: \"include\",\n        headers: h,\n        ...json !== undefined ? {\n            method: (_rest_method = rest.method) !== null && _rest_method !== void 0 ? _rest_method : \"POST\",\n            body: JSON.stringify(json)\n        } : {},\n        ...rest\n    };\n    const url = buildUrl(path);\n    const res = await fetch(url, init);\n    if (!res.ok) {\n        // lempar error lengkap (status + URL + pesan server)\n        throw new Error(\"[\".concat(res.status, \"] \").concat(url, \" \").concat(await readErrorMessage(res)));\n    }\n    if (res.status === 204 || !expectJson) {\n        // @ts-expect-error â€“ agar bisa return null saat expectJson=false\n        return null;\n    }\n    // jangan memaksa parse JSON kalau server tidak kirim JSON\n    const ct = res.headers.get(\"content-type\") || \"\";\n    if (!ct.includes(\"application/json\")) {\n        return await res.text();\n    }\n    return await res.json();\n}\n/* =================== Helper khusus FormData / Upload =================== */ async function apiForm(path, form) {\n    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const url = buildUrl(path);\n    const res = await fetch(url, {\n        method: \"POST\",\n        body: form,\n        credentials: \"include\",\n        ...opts\n    });\n    if (!res.ok) {\n        throw new Error(\"[\".concat(res.status, \"] \").concat(url, \" \").concat(await readErrorMessage(res)));\n    }\n    const ct = res.headers.get(\"content-type\") || \"\";\n    if (!ct.includes(\"application/json\")) {\n        // @ts-expect-error\n        return null;\n    }\n    return await res.json();\n}\n// Utils\nfunction stripHtml(input) {\n    if (!input) return \"\";\n    return input.replace(/<[^>]+>/g, \"\").replace(/\\s+/g, \" \").trim();\n}\nfunction getDomain(url) {\n    try {\n        if (!url) return \"\";\n        const u = new URL(url);\n        return u.hostname.replace(/^www\\./, \"\");\n    } catch (e) {\n        return \"\";\n    }\n}\nfunction buildGoogleNewsRssUrl(params) {\n    const { q, lang, country } = params;\n    const hl = \"\".concat(lang, \"-\").concat(country);\n    const ceid = \"\".concat(country, \":\").concat(lang);\n    const usp = new URLSearchParams({\n        q,\n        hl,\n        gl: country,\n        ceid\n    });\n    return \"https://news.google.com/rss/search?\".concat(usp.toString());\n}\nasync function fetchRssAsJson(rssUrl) {\n    const rss2jsonUrl = \"https://api.rss2json.com/v1/api.json?rss_url=\".concat(encodeURIComponent(rssUrl));\n    const res = await fetch(rss2jsonUrl, {\n        cache: \"no-store\"\n    });\n    if (!res.ok) throw new Error(\"RSS fetch failed: \".concat(res.status, \" \").concat(res.statusText));\n    return res.json();\n}\nfunction buildQuery(baseKeywords) {\n    const defaults = [\n        \"oil\",\n        \"gas\",\n        \"energy\",\n        \"petroleum\",\n        \"geothermal\",\n        \"renewable\",\n        \"minyak\",\n        \"energi\",\n        \"migas\"\n    ];\n    const extra = (baseKeywords || \"\").split(\",\").map((s)=>s.trim()).filter(Boolean);\n    const all = Array.from(new Set([\n        ...defaults,\n        ...extra\n    ]));\n    return all.map((k)=>'\"'.concat(k, '\"')).join(\" OR \");\n}\nfunction extractImageFromHtml(html) {\n    if (!html) return null;\n    const m = html.match(/<img[^>]+src=[\"']([^\"']+)[\"']/i);\n    return (m === null || m === void 0 ? void 0 : m[1]) || null;\n}\nfunction mapItem(it) {\n    var _it_enclosure;\n    const desc = stripHtml(it.description || it.content || \"\");\n    const image = (it === null || it === void 0 ? void 0 : (_it_enclosure = it.enclosure) === null || _it_enclosure === void 0 ? void 0 : _it_enclosure.link) && /^https?:\\/\\//i.test(it.enclosure.link) ? it.enclosure.link : extractImageFromHtml(it.description || it.content) || null;\n    return {\n        title: it.title,\n        link: it.link,\n        pubDate: it.pubDate,\n        source: it.author || getDomain(it.link),\n        description: desc,\n        summary: desc,\n        image\n    };\n}\nasync function fetchEnergyNews(params) {\n    const { scope, limit, lang, country, keywords } = params;\n    const q = buildQuery(keywords);\n    const urls = [];\n    if (scope === \"id\" || scope === \"both\") urls.push(buildGoogleNewsRssUrl({\n        q,\n        lang: \"id\",\n        country: \"ID\"\n    }));\n    if (scope === \"global\" || scope === \"both\") urls.push(buildGoogleNewsRssUrl({\n        q,\n        lang: \"en\",\n        country: \"US\"\n    }));\n    if (scope !== \"both\" && !(scope === \"id\" && lang === \"id\" && country === \"ID\" || scope === \"global\" && lang === \"en\" && country === \"US\")) {\n        urls.length = 0;\n        urls.push(buildGoogleNewsRssUrl({\n            q,\n            lang,\n            country\n        }));\n    }\n    const results = await Promise.allSettled(urls.map((u)=>fetchRssAsJson(u)));\n    const items = [];\n    for (const r of results){\n        if (r.status === \"fulfilled\") {\n            var _r_value_items;\n            for (const it of (_r_value_items = r.value.items) !== null && _r_value_items !== void 0 ? _r_value_items : [])items.push(mapItem(it));\n        }\n    }\n    // de-dupe berdasarkan link/title\n    const seen = new Set();\n    const deduped = items.filter((it)=>{\n        const key = it.link || it.title;\n        if (!key || seen.has(key)) return false;\n        seen.add(key);\n        return true;\n    });\n    // sort by pubDate desc\n    deduped.sort((a, b)=>+(b.pubDate ? new Date(b.pubDate) : 0) - +(a.pubDate ? new Date(a.pubDate) : 0));\n    return {\n        items: deduped.slice(0, Math.max(1, limit))\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});